{
	"info": {
		"_postman_id": "83a58b11-ff15-419d-9ee6-2c8dc06c4d65",
		"name": "users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "40646021-83a58b11-ff15-419d-9ee6-2c8dc06c4d65"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "Super Admin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b68fb7f-f9c9-4cec-8e3f-9df99a0bf3e1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b10cbc9-82e0-4f2e-8e7d-bc96af1d7e3e",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - accessToken and refreshToken\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.accessToken).to.exist;\r",
									"    pm.expect(responseData.refreshToken).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"AccessToken and refreshToken are non-empty strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.accessToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"AccessToken should not be empty\");\r",
									"    pm.expect(responseData.refreshToken).to.be.a('string').and.to.have.lengthOf.at.least(1, \"RefreshToken should not be empty\");\r",
									"\r",
									"    pm.environment.set(\"bearerToken\", responseData.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", responseData.refreshToken);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8d071042-3966-4d71-ae3a-1dab82bc5a29",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@gmail.com\",\n  \"password\": \"Password1234!\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": [
						{
							"id": "030cde37-81ff-473f-ad18-0e0b24f5ad63",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797b7c7b-3c31-44ff-a363-4b3b8ae6978f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"    pm.expect(responseData.errors).not.empty;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'ValidationException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('ValidationException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2867755a-ae01-40b0-8ab2-9f518941bde5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"<string>\",\r\n  \"password\": \"<string>\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797b7c7b-3c31-44ff-a363-4b3b8ae6978f",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'UnauthorizedException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('UnauthorizedException');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "03a8e0cd-2576-4e9b-9988-5d87562c6807",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"string@string.string\",\r\n  \"password\": \"string!@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"id": "c6eb9126-459d-42d1-85c3-fac972f14f06"
		},
		{
			"name": "refresh-token",
			"item": [
				{
					"name": "Invalid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64a06c9f-7d03-4fb5-9fde-d539541f7049",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"})\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'UnauthorizedException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('UnauthorizedException');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8ebaaa34-f079-480d-94ae-4be41d052969",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"refresh-token"
							]
						}
					},
					"response": [
						{
							"id": "9cbfff00-ea49-4313-bf1d-4dbb269caa85",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refreshToken\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"refresh-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Valid Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64a06c9f-7d03-4fb5-9fde-d539541f7049",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.accessToken).to.exist;\r",
									"    pm.expect(responseData.refreshToken).to.exist;\r",
									"})\r",
									"\r",
									"pm.test(\"RefreshToken and AccessToken are non-empty strigns\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.accessToken)\r",
									"        .to.be.a('string').and.to.have.lengthOf.at.least(1, \"AccessToken should not be empty\");\r",
									"    pm.expect(responseData.refreshToken)\r",
									"        .to.be.a('string').and.to.have.lengthOf.at.least(1, \"RefreshToken should not be empty\");\r",
									"\r",
									"    pm.environment.set(\"bearerToken\", responseData.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", responseData.refreshToken);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e67242d2-cee9-4e4d-b3a9-0a90c6c244d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"refresh-token"
							]
						}
					},
					"response": [
						{
							"id": "b8560c8c-43cc-447d-882f-a11423d4b07a",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"refreshToken\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"refresh-token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "fc5ce44c-b240-4778-b5c9-b65ace82707a"
		},
		{
			"name": "register",
			"item": [
				{
					"name": "Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59d6383b-6d4c-47ad-826e-c3c3454f90da",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Respone body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"    pm.expect(responseData.errors).not.empty;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'ValidationException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('ValidationException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fa71c32c-0209-46af-ac68-c3e3cbf3554c",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a8301989-2106-4d2e-8bb5-7c495c879ebb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"department\": \"\",\n  \"email\": \"\",\n  \"password\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": [
						{
							"id": "364b76e8-a96f-4f80-b512-a866ec6470a9",
							"name": "BadRequest",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e24de3d-637d-486d-b495-608e1d6a50c2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68c5b5a3-f9ba-4780-96ae-cc3f0db82e35",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.firstName).to.exist;\r",
									"    pm.expect(responseData.lastName).to.exist;\r",
									"    pm.expect(responseData.department).to.exist;\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"\r",
									"    pm.environment.set(\"userId\", responseData.id);\r",
									"    pm.environment.set(\"email\", responseData.email);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const requestData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.firstName).to.equal(requestData.firstName);\r",
									"    pm.expect(responseData.lastName).to.equal(requestData.lastName);\r",
									"    pm.expect(responseData.department).to.equal(requestData.department);\r",
									"    pm.expect(responseData.email).to.equal(requestData.email);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f6638641-ff55-4e1d-97c8-f567a9ed1985",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"department\": \"{{$randomDepartment}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"{{$randomPasswor}}!1\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": [
						{
							"id": "3c828282-b0b5-43c3-a11e-77543682ee35",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Email Already Exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e24de3d-637d-486d-b495-608e1d6a50c2",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "68c5b5a3-f9ba-4780-96ae-cc3f0db82e35",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'UnauthorizedException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('UnauthorizedException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "652ded9d-8355-40cb-9bd3-2d987ddf146a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"department\": \"{{$randomDepartment}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": [
						{
							"id": "68baa622-333a-4f4d-90c0-e66bb1f25dd3",
							"name": "Unauthorized",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "46d2b0db-0679-4045-9151-4727c91f1fc3"
		},
		{
			"name": "get-by-email",
			"item": [
				{
					"name": "NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da8510d0-232f-4911-acf7-2225cf84bdc5",
								"exec": [
									"pm.test(\"Response status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'NotFoundException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('NotFoundException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "db2a0717-31a6-40d4-aa4f-be43c5da6048",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":email"
							],
							"variable": [
								{
									"key": "email",
									"value": "{{$randomEmail}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "ec172c7a-96ca-4861-98a9-ec0b59af946a",
							"name": "NotFound",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":email"
									],
									"variable": [
										{
											"key": "email"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da8510d0-232f-4911-acf7-2225cf84bdc5",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.firstName).to.exist;\r",
									"    pm.expect(responseData.lastName).to.exist;\r",
									"    pm.expect(responseData.department).to.exist;\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "513b2502-8e25-4876-b3b6-3ce87fa432c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":email"
							],
							"variable": [
								{
									"key": "email",
									"value": "{{email}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "30abe81f-b9ff-48e6-b505-f2d445f713d5",
							"name": "Ok",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":email"
									],
									"variable": [
										{
											"key": "email"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "3be68534-73dd-4137-be1f-456226653acd"
		},
		{
			"name": "assign-role",
			"item": [
				{
					"name": "Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae9c696-0d69-4891-b63e-ff9a61f64b40",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"    pm.expect(responseData.errors).not.empty;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'ValidationException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('ValidationException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3affeaf4-8762-40b1-a4ea-d714bec24e24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{$guid}}\",\n  \"roleName\": \"{{$randomLoremWord}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/assign-role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"assign-role"
							]
						}
					},
					"response": [
						{
							"id": "2fbe3bce-1b09-486a-ac10-6f1fb229a266",
							"name": "BadRequest",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"<uuid>\",\n  \"roleName\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/assign-role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"assign-role"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ae9c696-0d69-4891-b63e-ff9a61f64b40",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'NotFoundException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('NotFoundException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "00badb1e-0664-41db-9dd6-ec2948984e96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{$guid}}\",\n  \"roleName\": \"SuperAdmin\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/assign-role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"assign-role"
							]
						}
					},
					"response": [
						{
							"id": "1b87866c-ac24-40ae-a81c-f064c7e3fc6f",
							"name": "NotFound",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"{{$guid}}\",\n  \"roleName\": \"Reguler\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/assign-role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"assign-role"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9da5d278-4905-4a73-94bf-3574f56a577f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should return true\", function () {\r",
									"    pm.expect(pm.response.text()).to.equal(\"true\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2d188630-8c24-40b7-8453-2021aac5dd53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"roleName\": \"SuperAdmin\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/assign-role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"assign-role"
							]
						}
					},
					"response": [
						{
							"id": "6388d378-f2f0-4e13-9e57-ddb2551b5071",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"<uuid>\",\n  \"roleName\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/assign-role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"assign-role"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "94c03d35-7cff-4c2a-964f-5500dcec4907"
		},
		{
			"name": "update",
			"item": [
				{
					"name": "Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3df3fa61-95f1-47b2-b548-8b03374b61e5",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"    pm.expect(responseData.errors).not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'ValidationException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('ValidationException');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3c615242-3d7b-439d-be66-f370c9b5d5a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"department\": \"\",\n  \"password\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "858c6f64-4520-4227-bd96-aed01a9b6333",
							"name": "BadRequest",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68f4374f-6488-4dc5-a8fb-f0c34e8f0641",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"rResponse body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.type).to.exist;\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.status).to.exist;\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"    pm.expect(responseData.instance).to.exist;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains 'NotFoundException'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include('NotFoundException');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d0f1db63-4833-44f9-8ea1-f9a3a7acc0cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"department\": \"{{$randomDepartment}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "4238c651-1c62-4bae-bf40-6a5f9476b20b",
							"name": "NotFound",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb7e5f12-636e-4848-83ce-9e9a0001a99f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Respnse body contains expected fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.firstName).to.exist;\r",
									"    pm.expect(responseData.lastName).to.exist;\r",
									"    pm.expect(responseData.department).to.exist;\r",
									"    pm.expect(responseData.email).to.exist;\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected values\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId\"));\r",
									"    pm.expect(responseData.email).to.equal(pm.environment.get(\"email\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "de2f3773-fa4c-430f-889e-344f1f42b9cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{userId}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"department\": \"{{$randomDepartment}}\",\n  \"password\": \"{{$randomPassword}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"id": "3512f9a8-b7a5-4d11-af94-3411e2d5011b",
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"department\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "3eb68fbd-4441-433c-9740-33fc9550aaf9"
		},
		{
			"name": "delete",
			"item": [
				{
					"name": "NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4204641d-bbb7-4ec2-8a16-b7104eca9947",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(404);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    const reposneData = pm.response.json();\r",
									"\r",
									"    pm.expect(reposneData).to.be.an('object');\r",
									"    pm.expect(reposneData.type).to.exist;\r",
									"    pm.expect(reposneData.title).to.exist;\r",
									"    pm.expect(reposneData.status).to.exist;\r",
									"    pm.expect(reposneData.detail).to.exist;\r",
									"    pm.expect(reposneData.instance).to.exist;\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4cacc2fb-2aad-4bf4-9f8a-8a3f63e65eaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{$guid}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"id": "52fd39b8-9819-428d-bb56-95a32003611c",
							"name": "NotFound",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4204641d-bbb7-4ec2-8a16-b7104eca9947",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response should return true\", function () {\r",
									"    pm.expect(pm.response.text()).include('true');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a3cd4ec8-6f4d-4437-9576-0bd72a00b996",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"id": "d444c3fe-6acc-43e2-aee8-33f73578fb3f",
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"id": "dd6d1f0d-196c-4167-8126-1ccdc0abc0b2"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9e9b7974-8095-4d6a-9213-01c9c03e6181",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b6eb683a-4d7c-4826-b13e-1f49f81c432e",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e30ef812-254a-4c5f-8707-2612a4ca57c7",
			"key": "baseUrl",
			"value": "http://localhost:8082",
			"type": "string"
		}
	]
}
