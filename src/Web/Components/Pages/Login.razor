@page "/login"
@using System.Net.Http.Json
@using Web.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory
@inject ITokenProviderService TokenProvider
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>
<Layout>
    <Div Margin="Margin.IsAuto.OnX" Width="Width.Is50">
        <Heading Size="HeadingSize.Is2" Margin="Margin.Is3.FromBottom" TextAlignment="TextAlignment.Center">
            Sign In
        </Heading>

        <Card Shadow="Shadow.Default">
            <CardBody>
                <Validations @ref="validations" Model="@loginModel">
                    <Form>
                        <Field>
                            <FieldLabel>Email</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="loginModel.Email" Role="TextRole.Email" Placeholder="Enter your email" />
                            </FieldBody>
                        </Field>

                        <Field>
                            <FieldLabel>Password</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="loginModel.Password" Role="TextRole.Password" Placeholder="Enter your password" TextEditType="TextEditType.Password" />
                            </FieldBody>
                        </Field>

                        <Field>
                            <Button Color="Color.Primary" Block Clicked="HandleValidSubmit">
                                Sign In
                            </Button>
                        </Field>
                    </Form>
                </Validations>
            </CardBody>
        </Card>
    </Div>

    <Snackbar 
    Visible="@showError" 
    VisibleChanged="@((bool value) => showError = value)" 
    Color="Color.Danger" 
    AutohideInterval="3000">
        @errorMessage
    </Snackbar>
</Layout>

@code {
    private LoginModel loginModel = new();
    private Validations validations;
    private bool showError = false;
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        if(await validations.ValidateAll())
        {
            var client = ClientFactory.CreateClient("api");
            var response = await client.PostAsJsonAsync("users/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                TokenProvider.SetToken(result.AccessToken);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                showError = true;
                errorMessage = "Invalid email or password.";
            }
        }

        else
        {
            Console.WriteLine("Login failed");
        }
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string AccessToken { get; set; }

        public string RefreshToken { get; set; }
    }
}
