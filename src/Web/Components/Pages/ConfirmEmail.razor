@page "/email-confirmation-info"
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory

<PageTitle>Email Confirmation</PageTitle>

<Layout>
    <Div Margin="Margin.IsAuto.OnX" Width="Width.Is50" TextAlignment="TextAlignment.Center">
        <Heading Size="HeadingSize.Is3" Margin="Margin.Is3">Email Confirmation</Heading>

        <Paragraph Margin="Margin.Is3">
            @if (isLoading)
            {
                <span>Confirming your email, please wait...</span>
            }
            else if (!string.IsNullOrEmpty(message))
            {
                <Alert Color="Color.Info">@message</Alert>

                @if (redirecting)
                {
                    <span>You will be redirected to the login page shortly...</span>
                }
            }
        </Paragraph>
    </Div>
</Layout>

@code {
    private string message;
    private bool isLoading = true;
    private bool redirecting;

    protected override async Task OnInitializedAsync()
    {
        var token = Microsoft.AspNetCore.WebUtilities
            .QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query)
            .TryGetValue("token", out var t) ? t.ToString() : null;

        if (string.IsNullOrWhiteSpace(token))
        {
            message = "❌ Invalid confirmation link.";
            isLoading = false;
            return;
        }

        try
        {
            var client = ClientFactory.CreateClient("api");
            var response = await client.GetAsync($"users/confirm-email?token={token}");

            if (response.IsSuccessStatusCode)
            {
                message = "✅ Your email has been confirmed!";
                redirecting = true;
                await Task.Delay(5000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var problem = await response.Content.ReadFromJsonAsync<ProblemDetails>();
                message = $"❌ Confirmation failed: {problem?.Detail ?? "Unknown error."}";
            }
        }
        catch (Exception ex)
        {
            message = $"❌ Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private class ProblemDetails
    {
        public string Detail { get; set; }
    }
}
