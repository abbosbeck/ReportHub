@page "/clients"
@using Web.Models
@using Web.Models.Clients
@using Web.Models.Users
@using Web.Services
@using Web.Services.Clients
@using Web.Services.Users
@inject IClientService ClientService
@inject IUserProviderService UserProvider
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Clients</PageTitle>
@if (userRoles.SystemRoles is not null && userRoles.SystemRoles.Contains("SuperAdmin"))
{
    <EditForm Model="@newClient" OnValidSubmit="AddClient" class="mb-3">

        <div class="d-flex align-items-end gap-2 flex-wrap">
            <div>
                <label class="form-label">Name</label>
                <InputText class="form-control form-control-sm" @bind-Value="newClient.Name" style="width: 150px;" />
            </div>

            <div>
                <label class="form-label">Country Code</label>
                <InputText class="form-control form-control-sm" @bind-Value="newClient.CountryCode" style="width: 120px;" />
            </div>

            <div>
                <label class="form-label">Owner</label>
                <InputSelect class="form-select form-select-sm" @bind-Value="newClient.OwnerId" style="width: 180px;">
                    <option value="">-- Select --</option>
                    @foreach (var user in _users)
                    {
                        <option value="@user.Id">@user.FirstName, @user.LastName</option>
                    }
                </InputSelect>
            </div>

            <div>
                <button type="submit" class="btn btn-sm btn-primary mt-2">Add Client</button>
            </div>
        </div>
    </EditForm>


    <Table Striped ResponsiveMode="TableResponsiveMode.Mobile" Bordered Hoverable>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>#</TableHeaderCell>
                <TableHeaderCell>Name</TableHeaderCell>
                <TableHeaderCell>Currency Code</TableHeaderCell>
                <TableHeaderCell></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @for (var i = 0; i < _clients.Count; i++)
            {
                var index = i;
                <TableRow>
                    <TableRowHeader>@(index + 1)</TableRowHeader>
                    <TableRowCell>@_clients[index].Name</TableRowCell>
                    <TableRowCell>@_clients[index].CountryCode</TableRowCell>
                    <Delete @ref="deleteModal" OnConfirm="ConfirmDelete" />
                    <TableRowCell class="icon-cell">
                        <div class="d-flex justify-content-center align-items-center gap-2">
                            <Icon Name="IconName.Eye" class="text-primary" />
                            <Icon Name="IconName.Edit" class="text-warning" />
                            <Icon Name="IconName.Delete" class="text-danger cursor-pointer" @onclick="() => PromptDelete(_clients[index].Id)" />
                        </div>
                    </TableRowCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}
else
{
    <p>You are not allowed to this page!</p>
}


@code {
    private List<ClientResponse> _clients = [];
    private List<UserResponse> _users = [];
    private ClientCreateRequest newClient = new();
    private UserRoles userRoles;

    private Delete deleteModal;
    private Guid? selectedClientId;

    private void PromptDelete(Guid id)
    {
        selectedClientId = id;
        deleteModal.Show();
    }

    private async Task ConfirmDelete()
    {
        await ClientService.DeleteAsyn(selectedClientId.Value);
        _clients = await ClientService.GetListAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        userRoles = UserProvider.GetRoles()
            ?? new UserRoles();

        _clients = await ClientService.GetListAsync();
        _users = await UserService.UserListAsync();
    }

    private async Task AddClient()
    {
        await ClientService.CreateAsync(newClient);
        newClient = new();
        _clients = await ClientService.GetListAsync();
    }
}
