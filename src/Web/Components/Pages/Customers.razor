@page "/customers"
@using Web.Models
@using Web.Models.Clients
@using Web.Models.Customers
@using Web.Models.Users
@using Web.Services
@using Web.Services.Clients
@using Web.Services.Customers
@using Web.Services.Users
@inject ICustomerService CustomerService
@inject IClientService ClientService
@inject IUserProviderService UserProvider
@rendermode InteractiveServer

<h3>Customers</h3>
@if (userRoles.ClientRoles is not null && userRoles.ClientRoles.Contains("Owner"))
{
    @if (clients is not null)
    {
        <div class="d-flex align-items-center">
            <select @bind="selectedClientId" class="form-select me-2" style="width: auto;">
                <option value="">-- Select a Client --</option>
                @foreach (var client in clients)
                {
                    <option value="@client.Id">@client.Name</option>
                }
            </select>
            <button class="btn btn-primary mt-2" @onclick="OnClientSelected">Load</button>
        </div>

        @if (isClientSelected)
        {
            <EditForm Model="@newCustomer" OnValidSubmit="AddCustomer" class="mb-3">
                <div class="d-flex justify-content-between align-items-end flex-wrap">
                    <div class="d-flex align-items-end gap-2 flex-wrap">
                        <div>
                            <label class="form-label">Name</label>
                            <InputText class="form-control form-control-sm" @bind-Value="newCustomer.Name" style="width: 180px;" />
                        </div>

                        <div>
                            <label class="form-label">Email</label>
                            <InputText class="form-control form-control-sm" @bind-Value="newCustomer.Email" style="width: 220px;" />
                        </div>

                        <div>
                            <label class="form-label">Country Code</label>
                            <InputText class="form-control form-control-sm" @bind-Value="newCustomer.CountryCode" style="width: 120px;" />
                        </div>

                        <div>
                            <button type="submit" class="btn btn-sm btn-primary mt-2">Add Customer</button>
                        </div>
                    </div>


                    <div>
                        <label>Import Customers</label>
                        <div class="d-flex align-items-end gap-2 mt-2">
                            <InputFile OnChange="HandleFileSelected" class="form-control form-control-sm" style="width: auto;"/>
                            <button class="btn btn-sm btn-primary" @onclick="UploadFile" disabled="@(selectedFile is null)">Upload</button>
                        </div>
                    </div>
                </div>
            </EditForm>
         }



        <p></p>
        <Table Striped ResponsiveMode="TableResponsiveMode.Mobile" Bordered Hoverable>
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>#</TableHeaderCell>
                    <TableHeaderCell>Name</TableHeaderCell>
                    <TableHeaderCell>Email</TableHeaderCell>
                    <TableHeaderCell>Country Code</TableHeaderCell>
                    <TableHeaderCell></TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @for (var i = 0; i < customers.Count; i++)
                {
                    var index = i;
                    <TableRow>
                        <TableRowHeader>@(index + 1)</TableRowHeader>
                        <TableRowCell>@customers[index].Name</TableRowCell>
                        <TableRowCell>@customers[index].Email</TableRowCell>    
                        <TableRowCell>@customers[index].CountryCode</TableRowCell>
                        <Delete @ref="deleteModal" OnConfirm="ConfirmDelete" />
                        <TableRowCell class="icon-cell">
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <Icon Name="IconName.Edit" class="text-warning" />
                                <Icon Name="IconName.Delete" class="text-danger cursor-pointer" @onclick="() => PromptDelete(customers[index].Id)" />
                            </div>
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    }
    else
    {
        <p>You don`t have any client!</p>
    }

}
else
{
    <p>You are not allowed to this page!</p>
}


@code {
    private List<CustomerResponse> customers = [];
    private List<ClientResponse> clients;
    private UserRoles userRoles;
    private Guid? selectedClientId;
    private bool isClientSelected = false;

    private Delete deleteModal;
    private Guid selectedCustomerId;

    private CreateCustomerRequest newCustomer = new();

    private IBrowserFile selectedFile;

    private void PromptDelete(Guid id)
    {
        selectedCustomerId = id;
        deleteModal.Show();
    }

    private async Task ConfirmDelete()
    {
        await CustomerService.DeleteAsync(selectedCustomerId, selectedClientId.Value);
        customers = await CustomerService.GetListAsync(selectedClientId.Value);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        userRoles = UserProvider.GetRoles()
            ?? new UserRoles();

        clients = await ClientService.GetUserClients();
    }

    private async Task OnClientSelected()
    {
        if (selectedClientId is not null)
        {
            isClientSelected = true;
            customers = await CustomerService.GetListAsync(selectedClientId.Value);
        }
    }

    private async Task AddCustomer()
    {
        await CustomerService.CreateAsync(newCustomer, selectedClientId.Value);
        newCustomer = new();
        customers = await CustomerService.GetListAsync(selectedClientId.Value);
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(selectedFile.Size);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var fileBytes = memoryStream.ToArray();

            customers = await CustomerService
                    .UploadCustomerListAsync(fileBytes, selectedFile.Name, selectedClientId.Value);

            selectedFile = null;
        }
    }
}